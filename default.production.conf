# Production Nginx Configuration Template
# For use with docker-compose-prod.yml
# REPLACE 'yourdomain.com' with your actual domain before use
#
# Multi-tenant structure:
# - app.yourdomain.com → Public tenant (main application)
# - tenant1.yourdomain.com → Individual tenant applications
# - yourdomain.com → Optional marketing/landing site

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name *.yourdomain.com yourdomain.com;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# Main HTTPS server for multi-tenant setup
server {
    listen 443 ssl http2;
    # Support wildcard subdomains for multi-tenant production
    server_name *.yourdomain.com yourdomain.com;

    # SSL Configuration (requires wildcard certificate)
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    
    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    
    # SSL session settings
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # API requests to Django backend
    location /api/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Increase proxy timeouts for production
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
    }

    # Django admin interface
    location /admin/ {
        proxy_pass http://backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Additional security for admin
        add_header X-Robots-Tag "noindex, nofollow" always;
    }

    # Media files (uploaded content)
    location /media/ {
        alias /usr/share/nginx/media/;
        expires 30d;
        add_header Cache-Control "public, immutable";
        add_header Access-Control-Allow-Origin "*";
        
        # Gzip compression for media
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip on;
            gzip_vary on;
        }
    }

    # Frontend application (React build)
    # All tenant subdomains serve the same frontend app
    # The frontend handles tenant-specific routing based on subdomain
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip on;
            gzip_vary on;
        }
        
        # Don't cache HTML files
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Robots.txt for tenant subdomains
    location /robots.txt {
        # Prevent indexing of tenant subdomains by default
        if ($host != "yourdomain.com") {
            return 200 "User-agent: *\nDisallow: /\n";
        }
        try_files $uri $uri/ =404;
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# Production Setup Requirements:
# 1. Replace all instances of 'yourdomain.com' with your actual domain
# 2. Obtain wildcard SSL certificate: *.yourdomain.com
# 3. Configure DNS with wildcard A record: *.yourdomain.com → your-server-ip
# 4. Test SSL configuration: https://www.ssllabs.com/ssltest/
# 5. Update firewall to allow ports 80 and 443
#
# SSL Certificate Commands:
# certbot certonly --nginx -d yourdomain.com -d *.yourdomain.com
# or
# certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d yourdomain.com -d *.yourdomain.com