name: Deploy Django React Template to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        run: |
          docker build -t django-react-template-backend:latest ./backend

      - name: Build frontend image
        run: |
          docker build -t django-react-template-frontend:latest ./frontend

      - name: Run backend tests
        run: |
          # Create test environment file
          cp backend/.env.example backend/.env.test
          # Run tests in Docker
          docker run --rm -v $(pwd)/backend:/app -w /app \
            --env-file backend/.env.test \
            django-react-template-backend:latest \
            python manage.py test

  # Prepare deployment files
  prepare-deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production environment files
        run: |
          # Create backend production environment
          cat > backend/.env.production << 'EOF'
          DEBUG=False
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@db:5432/baseline_saas
          REDIS_URL=redis://redis:6379/0
          ALLOWED_HOSTS=*
          CORS_ALLOWED_ORIGINS=https://${{ secrets.DOMAIN_NAME }},http://${{ secrets.DOMAIN_NAME }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
          EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}
          EOF

          # Create frontend production environment
          cat > .env.production << 'EOF'
          NODE_ENV=production
          REACT_APP_API_URL=https://${{ secrets.DOMAIN_NAME }}/api
          REACT_APP_DOMAIN=${{ secrets.DOMAIN_NAME }}
          EOF

      - name: Prepare production docker-compose file
        run: |
          # Copy existing production compose file
          cp docker-compose-prod.yml docker-compose.production.yml

          # Update images to use GitHub Container Registry
          sed -i 's|build:|image: ghcr.io/fernando737/django-react-template-backend:latest #build:|g' docker-compose.production.yml
          sed -i '/context: \.\/backend/d' docker-compose.production.yml
          sed -i '/dockerfile:/d' docker-compose.production.yml
          sed -i '/args:/d' docker-compose.production.yml
          sed -i '/- FRONTEND_URL/d' docker-compose.production.yml

          # Update frontend to use container registry image
          sed -i '/frontend:/,/depends_on:/ { s|build:|image: ghcr.io/fernando737/django-react-template-frontend:latest #build:|g; /context: \.\/frontend/d; /args:/d; /- VITE_DNS_URL/d; /- VITE_BACKEND_PREFIX/d; }' docker-compose.production.yml

          # Update environment file references
          sed -i 's|./backend/\.env|backend/.env.production|g' docker-compose.production.yml

          # Remove development volumes
          sed -i '/- \.\/backend\/app:\/app/d' docker-compose.production.yml
          sed -i '/- \.\/backend:\/code/d' docker-compose.production.yml
          sed -i '/- frontend-dist:\/app\/dist/d' docker-compose.production.yml


      - name: Upload deployment files
        uses: actions/upload-artifact@v3
        with:
          name: deployment-files
          path: |
            backend/.env.production
            .env.production
            docker-compose.production.yml

  # Build and push Docker images
  build-and-push:
    needs: [build-and-test, prepare-deployment]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/fernando737/django-react-template-backend:latest
            ghcr.io/fernando737/django-react-template-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ghcr.io/fernando737/django-react-template-frontend:latest
            ghcr.io/fernando737/django-react-template-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to droplet
  deploy:
    needs: [prepare-deployment, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Download deployment files
        uses: actions/download-artifact@v3
        with:
          name: deployment-files

      - name: Copy deployment files to droplet
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./*"
          target: "/home/${{ secrets.DROPLET_USER }}/django-react-template/"

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to application directory
            cd /home/${{ secrets.DROPLET_USER }}/django-react-template

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest code (if repo exists)
            if [ -d ".git" ]; then
              git pull origin main
            else
              # Clone repository if it doesn't exist
              git clone https://github.com/fernando737/django-react-template.git .
            fi

            # Pull latest Docker images
            docker-compose -f docker-compose.production.yml pull

            # Stop existing containers
            docker-compose -f docker-compose.production.yml down

            # Start new containers
            docker-compose -f docker-compose.production.yml up -d

            # Wait for database to be ready
            sleep 30

            # Run database migrations (following your existing pattern)
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py wait_for_db
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate_schemas --shared
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py create_public_tenant
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py create_demo_tenant

            # Collect static files
            docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput

            # Clean up old images
            docker image prune -f

      - name: Setup SSL certificate (using Certbot container)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to application directory
            cd /home/${{ secrets.DROPLET_USER }}/django-react-template

            # Setup SSL certificate using certbot container (only if not already present)
            if [ ! -f "./ssl/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem" ]; then
              echo "Setting up SSL certificate for ${{ secrets.DOMAIN_NAME }}"

              # Run certbot to obtain certificate
              docker-compose -f docker-compose.production.yml run --rm certbot certonly \
                --webroot --webroot-path=/var/www/certbot \
                -d ${{ secrets.DOMAIN_NAME }} \
                -d www.${{ secrets.DOMAIN_NAME }} \
                --email ${{ secrets.SSL_EMAIL }} \
                --agree-tos --no-eff-email

              # Reload nginx to use new certificates
              docker-compose -f docker-compose.production.yml exec nginx nginx -s reload
            else
              echo "SSL certificate already exists for ${{ secrets.DOMAIN_NAME }}"
            fi

  # Health check
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for application startup
        run: sleep 60

      - name: Check application health
        run: |
          # Check if application is responding
          if curl -f --max-time 30 https://${{ secrets.DOMAIN_NAME }}/api/health/ 2>/dev/null; then
            echo "✅ Backend API is healthy"
          else
            echo "❌ Backend API health check failed"
            exit 1
          fi

          if curl -f --max-time 30 https://${{ secrets.DOMAIN_NAME }}/ 2>/dev/null; then
            echo "✅ Frontend is healthy"
          else
            echo "❌ Frontend health check failed"
            exit 1
          fi

          echo "🚀 Application is healthy and responding"

  # Notify deployment status
  notify:
    needs: [deploy, health-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment success
        if: needs.health-check.result == 'success'
        run: |
          echo "🚀 Deployment successful!"
          echo "Application is available at: https://${{ secrets.DOMAIN_NAME }}"

      - name: Notify deployment failure
        if: needs.health-check.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          exit 1
